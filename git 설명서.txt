# Git
 - .git 폴더가 있는 폴더의 내용을 모두 관리해주는 프로그램
 - 무언가가 조금이라도 변하면 모든 것을 관리해줌
 - 원래는 Git을 설치해야 하지만, Eclipse에 Git이 내장되어 있다.

# GitHub
 - 자기 컴퓨터에서 작업하고 .git으로 관리하던 폴더의 내용을
   온라인에 올려서 공유 하는것 
 - GitHub로 저장하는 것을 push라고 하고
   GitHub에서 자기 컴퓨터로 내려받는 것을 pull이라고 한다.
 - clone이라는 기능을 통해 모두 복사해서 가져올 수도 있다.
   
=========================================================

# Git을 통한 폴더관리의 기본
 - git폴더 내부에 무엇인가 변하면 git이 알고있다.
 	- unstaged 상태 :  이번 commit에 포함하지 않을 변화들
 	- staged 상태 : 이번 commit에 포함할 변화들
 - 원래 콘솔 화면에서는 git add 명령어를 쓴다. 
 - commit : 현재 상태의 스냅샷을 찍는다.

# Commit
 - 현재 stage에 추가된 파일들을 하나의 커밋으로 만든다.
 - Git은 언제든 관리하는 폴더의 모든 내용을 원하는 commit상태로으로 바꿀 수 있다.

# Push
 - 로컬 repository에서 추가한 최신 커밋을 원격 repository에 업데이트한다.

# Pull
 - GitHub의 최신상태를 로컬 repository로 업데이트한다.
(다른 컴퓨터에서 작업한 내용을 이미 클론이 되어있는 또다른 컴퓨터에 업데이트)

# .gitignore
 - Git이 특정 확장자를 무시하도로고 설정할 수 있다.
 - .gitignore 파일 내부에 작성한 확장자 또는 경로를 무시하게 된다.

# 이전 commit으로 돌아가기
 - 원래는 명령어 써야함.
 - 우클릭 > switch to > commit 선택후 원하는 시점
 - 우클릭 > switch to : main 롤백
 - Show View > Git Reflog에서 원하는 커밋을 check out

================================================================

( 팀 작업에서 Branch를 각자 따고 하나로 모으기(Merge)도 함 )
# Branch
 - 나뭇가지
 - 하나의 폴더를 다양한 상태로 나누는 것
 - git repo > switch to > new branch : 새로운 branch 생성

# Merge
 - 다른 Branch에서 작업한 내용을 합치는 것
 - 원하는 Branch로 CheckOut한 후에 Merge를 선택하고 
   합치려는 Branch를 선택한다.
ex > master에 BranchA를 합치고 싶은경우
	master로 checkout한 후에 BranchA를 Merge한다.

# fast-forward
	  ㅁ - ㅁ - ㅁ BranchA
	  /
 ㅁ - ㅁ - ㅁ main

 - main's history
 ㅁ - ㅁ - ㅁ

 - BranchA's history
	   ㅁ - ㅁ - ㅁ 
	  /
 ㅁ - ㅁ - ㅁ 

 ※ mian에 최신 BranchA를 합치기 위해서는 앞으로 빨리감기만 하면 된다.

================================================================

# Rebase
 Merge하려는 Branch에 시작점을 앞으로 땡겨서 history를 길게 만드는것

	  ㅁ - ㅁ - ㅁ BranchA
	  /
 ㅁ - ㅁ - ㅁ - ㅁ - ㅁ  main
	
		=>

	  		      ㅁ - ㅁ - ㅁ BranchA
	 		     /
	 ㅁ - ㅁ - ㅁ - ㅁ - ㅁ	main

 	※ Main은  BranchA의 과거가 됨

=================================================================
